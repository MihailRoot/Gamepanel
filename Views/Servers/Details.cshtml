@model panel.Models.Server
@using panel.Areas.Identity
@{
    ViewData["Title"] = "Details";
}

          <link rel="stylesheet" href="~/js/node_modules/xterm/css/xterm.css" />
          <script src="~/js/node_modules/xterm/lib/xterm.js"></script>
          <script src="~/js/node_modules/xterm-addon-attach/lib/xterm-addon-attach.js"></script>
	      <script
  src="https://code.jquery.com/jquery-3.6.3.js"
  integrity="sha256-nQLuAZGRRcILA+6dMBOvcRh5Pe310sBpanc6+QBmyVM="
  crossorigin="anonymous"></script>

<h1>Details</h1>
<div id="terminal"></div>

<div class="form-group">
  <input type="text" class="form-control" id="inp_1">
</div>
<button onclick="multi()"  class="btn btn-primary" >Отправить команду</button>
      <div>
          <h4>Server</h4>
          <hr />
          <dl class="row">
              <dt class="col-sm-2">
                 @Html.DisplayNameFor(model => model.Name)
              </dt>
              <dd class="col-sm-10">
                 <p id="name"> @Html.DisplayFor(model => model.Name)</p>
              </dd>
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.email)
              </dt>
              <dd class="col-sm-10">
                  @Html.DisplayFor(model => model.email)
              </dd>

              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.ip)
              </dt>
              <dd class="col-sm-10">
                <p id="Ip">  @Html.DisplayFor(model => model.ip)</p>
              </dd>
@*              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.ipnode)
              </dt>
              <dd class="col-sm-10">
                <p id="Ip">  @Html.DisplayFor(model => model.ipnode)</p>
              </dd>*@
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.ContainerId)
              </dt>
              <dd class="col-sm-10">
                  <p id="containerid">@Html.DisplayFor(model => model.ContainerId)</p>
              </dd>
              <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Port)
              </dt>
              <dd class="col-sm-10">
                 <p id ="port"> @Html.DisplayFor(model => model.Port)</p>
              </dd>
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.Setup)
              </dt>
              <dd class="col-sm-10">
                  <p id="Setup">@Html.DisplayFor(model => model.Setup)</p>
              </dd>
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.Image)
              </dt>
              <dd class="col-sm-10">
                 <p id="Image"> @Html.DisplayFor(model => model.Image)</p>
              </dd>
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.cpu)
              </dt>
              <dd class="col-sm-10">
                  @Html.DisplayFor(model => model.cpu)
              </dd>
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.memory)
              </dt>
              <dd class="col-sm-10">
                  @Html.DisplayFor(model => model.memory)
              </dd>
              <dt class="col-sm-2">
                  @Html.DisplayNameFor(model => model.Disk)
              </dt>
              <dd class="col-sm-10">
                  @Html.DisplayFor(model => model.Disk)
              </dd>
               <dd class="col-sm-10">
                 <p id='idpanel'> @Html.DisplayFor(model => model.Id)</p>
              </dd>
          </dl>
          <p>FTP_USER AND PASSWORD</p>
          <p id="nameuser"> @Html.DisplayFor(model => model.email)</p>
          <p id="passwordforuser">@Html.DisplayFor(model => model.Name)</p>
      </div>
<div>
    <a  href="#" class="start">Создать контейнер с сервером</a>
      <a  href="#" class="running">Включить сервер</a>

     <a  href="#" class="stop">Выключить сервер</a>

    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
            <script >
        var getidpanel;
         getidpanel = document.getElementById("Ip").innerHTML.trimStart();

            console.log(getidpanel)
        </script>

      <script>
        var term = new Terminal();
        term.open(document.getElementById('terminal'));
        term.write('Container: \x1B[1;3;31mxterm.js\x1B[0m $ ')
        var socket = new WebSocket(`ws://${getidpanel}:3000/`); 
        const attachAddon = new AttachAddon.AttachAddon(socket)
        term.loadAddon(attachAddon);
        socket.onmessage = function(msg) {
            console.log(msg)
        }  
        // setInterval(() => {
        //     location.reload()
        // }, 10000);
        socket.onopen = function() {
        console.log("Connection is stabled")
        } 
        socket.onclose = function(){
                console.log("Connection was closed ")
        }
      </script>
    <script>
        function multi(){
        var command =  document.getElementById("inp_1").value
        var fu = {
            "command": "dockercommand()",
            "com":command,
        }
        socket.send(JSON.stringify(fu))
        }
    </script>
    <script>
$(".running").click(function() {
    console.log("openconnection => run")

    var getid = document.getElementById("idpanel").innerHTML

    var fa = {
       "run":"dockerun()",
        "Id": getid

    }
    socket.send(JSON.stringify(fa))
})
    </script>
        <script>
$(".stop").click(function() {
    console.log("openconnection => stop")

    var getid = document.getElementById("idpanel").innerHTML

    var fa = {
       "stop":"dockerstop()",
        "Id": getid

    }
    socket.send(JSON.stringify(fa))
})
    </script>
    <script>     
socket.onopen = function() {

    var getid = document.getElementById("idpanel").innerHTML
    var getip = document.getElementById("Ip").innerHTML.trim()
    console.log(getid)
    var fu = {
        "ip":getip,
        "Id": getid
    }
    socket.send(JSON.stringify(fu))
}
    </script>
    <script>
    $(".start").click(function() {
    console.log('faaf')
    var getid = document.getElementById("idpanel").innerHTML

    var fa = {
       "Id": getid,
       "start":"dockercreate()",
    }
    //Засунуть ftp при включении сокета.Добавить включение его для подробной статистики.(Если всё пройдёт успешно при включении!!)
    socket.send(JSON.stringify(fa));
    socket.onopen = function() {
        console.log("connected")
    }
})
    </script>
 @*   <script>
$(".start").click(function() {
    console.log('faaf')
    var getp = $("#containerid").text();
    var getimage = $("#Image").text();
    var setup = $("#Setup").text();
    var port = $("#port").text();
    var ip = $("#Ip").text();
    var nameuser = $("#nameuser").text();
    var passwordforuser = $("#passwordforuser").text();
    var fa = {
       "start":"dockercreate()",
       "containerid":getp,
       "Image":getimage,
       "Setup":setup,
       "Port":port,
       "Ip":ip,
       "username": nameuser,
       "password": passwordforuser,
    }
    //Засунуть ftp при включении сокета.Добавить включение его для подробной статистики.(Если всё пройдёт успешно при включении!!)
    socket.send(JSON.stringify(fa));
    socket.onopen = function() {
        console.log("connected")
    }
})
var foo = {
    "stop":"dockerstop()"
}
$(".stop").click(function(){
    websocket.send(JSON.stringify(foo))
    socket.onopen = function() {
    console.log("Connected")

    }
})
socket.onopen  = ("connection", function() {
    var nameuser = $("#nameuser").text();
    var passwordforuser = $("#passwordforuser").text();
    var fae = {
       "username": nameuser,
       "password": passwordforuser,
    }
    socket.send(JSON.stringify(fae))
    console.log("Connect")
})
    </script>*@
</div>
